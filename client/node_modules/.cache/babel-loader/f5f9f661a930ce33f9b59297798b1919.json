{"ast":null,"code":"import _styled from \"styled-components\";\n\nvar _jsxFileName = \"/Users/kobe/WebstormProjects/2022/music-transfer/client/src/components/Playlists/Recommendations.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useMemo } from 'react';\nimport { Link } from '@reach/router';\nimport PropTypes from 'prop-types';\nimport { getPlaylist, getRecommendationsForTracks, getUser, createPlaylist, addTracksToPlaylist, followPlaylist, doesUserFollowPlaylist } from '../../spotify';\nimport { catchErrors } from '../../utils';\nimport TrackItem from '../Tracks/TrackItem';\nimport { theme, mixins, media, Main } from '../../styles';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  colors\n} = theme;\nconst PlaylistHeading = _styled.div`\n  ${mixins.flexBetween};\n  ${media.tablet`\n    flex-direction: column;\n\n  `};\n  h2 {\n    margin-bottom: 0;\n  }\n`;\n_c = PlaylistHeading;\nconst SaveButton = _styled.button`\n  ${mixins.greenButton};\n`;\n_c2 = SaveButton;\nconst OpenButton = _styled.a`\n  ${mixins.button};\n`;\n_c3 = OpenButton;\nconst TracksContainer = _styled.ul`\n  margin-top: 50px;\n`;\n_c4 = TracksContainer;\nconst PlaylistLink = _styled(Link)`\n  &:hover,\n  &:focus {\n    color: ${colors.offGreen};\n  }\n`;\n_c5 = PlaylistLink;\n\nconst Recommendations = props => {\n  _s();\n\n  const {\n    playlistId\n  } = props;\n  const [playlist, setPlaylist] = useState(null);\n  const [recommendations, setRecommmendations] = useState(null);\n  const [recPlaylistId, setRecPlaylistId] = useState(null);\n  const [userId, setUserId] = useState(null);\n  const [isFollowing, setIsFollowing] = useState(false);\n  useEffect(() => {\n    const fetchPlaylistData = async () => {\n      const {\n        data\n      } = await getPlaylist(playlistId);\n      setPlaylist(data);\n    };\n\n    catchErrors(fetchPlaylistData());\n\n    const fetchUserData = async () => {\n      const {\n        data\n      } = await getUser();\n      setUserId(data.id);\n    };\n\n    catchErrors(fetchUserData());\n  }, [playlistId]);\n  useMemo(() => {\n    const fetchData = async () => {\n      if (playlist) {\n        const {\n          data\n        } = await getRecommendationsForTracks(playlist.tracks.items);\n        setRecommmendations(data);\n      }\n    };\n\n    catchErrors(fetchData());\n  }, [playlist]); // If recPlaylistId has been set, add tracks to playlist and follow\n\n  useMemo(() => {\n    const isUserFollowingPlaylist = async plistId => {\n      const {\n        data\n      } = await doesUserFollowPlaylist(plistId, userId);\n      setIsFollowing(data[0]);\n    };\n\n    const addTracksAndFollow = async () => {\n      const uris = recommendations.tracks.map(_ref => {\n        let {\n          uri\n        } = _ref;\n        return uri;\n      }).join(',');\n      const {\n        data\n      } = await addTracksToPlaylist(recPlaylistId, uris); // Then follow playlist\n\n      if (data) {\n        await followPlaylist(recPlaylistId); // Check if user is following so we can change the save to spotify button to open on spotify\n\n        catchErrors(isUserFollowingPlaylist(recPlaylistId));\n      }\n    };\n\n    if (recPlaylistId && recommendations && userId) {\n      catchErrors(addTracksAndFollow(recPlaylistId));\n    }\n  }, [recPlaylistId, recommendations, userId]);\n\n  const createPlaylistOnSave = async () => {\n    if (!userId) {\n      return;\n    }\n\n    const name = `Recommended Tracks Based on ${playlist.name}`;\n    const {\n      data\n    } = await createPlaylist(userId, name);\n    setRecPlaylistId(data.id);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Main, {\n    children: [playlist && /*#__PURE__*/_jsxDEV(PlaylistHeading, {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Recommended Tracks Based On\", ' ', /*#__PURE__*/_jsxDEV(PlaylistLink, {\n          to: `/playlists/${playlist.id}`,\n          children: playlist.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 11\n      }, this), isFollowing && recPlaylistId ? /*#__PURE__*/_jsxDEV(OpenButton, {\n        href: `https://open.spotify.com/playlist/${recPlaylistId}`,\n        target: \"_blank\",\n        rel: \"noopener noreferrer\",\n        children: \"Open in Spotify\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(SaveButton, {\n        onClick: catchErrors(createPlaylistOnSave),\n        children: \"Save to Spotify\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(TracksContainer, {\n      children: recommendations && recommendations.tracks.map((track, i) => /*#__PURE__*/_jsxDEV(TrackItem, {\n        track: track,\n        imageSize: \"small\"\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 52\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 115,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Recommendations, \"Yh7AjOQIm0Un4vbfjIFcxBXkHr0=\");\n\n_c6 = Recommendations;\nRecommendations.propTypes = {\n  playlistId: PropTypes.string\n};\nexport default Recommendations;\n\nvar _c, _c2, _c3, _c4, _c5, _c6;\n\n$RefreshReg$(_c, \"PlaylistHeading\");\n$RefreshReg$(_c2, \"SaveButton\");\n$RefreshReg$(_c3, \"OpenButton\");\n$RefreshReg$(_c4, \"TracksContainer\");\n$RefreshReg$(_c5, \"PlaylistLink\");\n$RefreshReg$(_c6, \"Recommendations\");","map":{"version":3,"sources":["/Users/kobe/WebstormProjects/2022/music-transfer/client/src/components/Playlists/Recommendations.js"],"names":["React","useState","useEffect","useMemo","Link","PropTypes","getPlaylist","getRecommendationsForTracks","getUser","createPlaylist","addTracksToPlaylist","followPlaylist","doesUserFollowPlaylist","catchErrors","TrackItem","theme","mixins","media","Main","colors","PlaylistHeading","styled","div","flexBetween","tablet","SaveButton","button","greenButton","OpenButton","a","TracksContainer","ul","PlaylistLink","offGreen","Recommendations","props","playlistId","playlist","setPlaylist","recommendations","setRecommmendations","recPlaylistId","setRecPlaylistId","userId","setUserId","isFollowing","setIsFollowing","fetchPlaylistData","data","fetchUserData","id","fetchData","tracks","items","isUserFollowingPlaylist","plistId","addTracksAndFollow","uris","map","uri","join","createPlaylistOnSave","name","track","i","propTypes","string"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useMemo } from 'react';\nimport { Link } from '@reach/router';\nimport PropTypes from 'prop-types';\nimport {\n  getPlaylist,\n  getRecommendationsForTracks,\n  getUser,\n  createPlaylist,\n  addTracksToPlaylist,\n  followPlaylist,\n  doesUserFollowPlaylist,\n} from '../../spotify';\nimport { catchErrors } from '../../utils';\n\nimport TrackItem from '../Tracks/TrackItem';\n\nimport styled from 'styled-components/macro';\nimport { theme, mixins, media, Main } from '../../styles';\nconst { colors } = theme;\n\nconst PlaylistHeading = styled.div`\n  ${mixins.flexBetween};\n  ${media.tablet`\n    flex-direction: column;\n\n  `};\n  h2 {\n    margin-bottom: 0;\n  }\n`;\nconst SaveButton = styled.button`\n  ${mixins.greenButton};\n`;\nconst OpenButton = styled.a`\n  ${mixins.button};\n`;\nconst TracksContainer = styled.ul`\n  margin-top: 50px;\n`;\nconst PlaylistLink = styled(Link)`\n  &:hover,\n  &:focus {\n    color: ${colors.offGreen};\n  }\n`;\n\nconst Recommendations = props => {\n  const { playlistId } = props;\n\n  const [playlist, setPlaylist] = useState(null);\n  const [recommendations, setRecommmendations] = useState(null);\n  const [recPlaylistId, setRecPlaylistId] = useState(null);\n  const [userId, setUserId] = useState(null);\n  const [isFollowing, setIsFollowing] = useState(false);\n\n  useEffect(() => {\n    const fetchPlaylistData = async () => {\n      const { data } = await getPlaylist(playlistId);\n      setPlaylist(data);\n    };\n    catchErrors(fetchPlaylistData());\n\n    const fetchUserData = async () => {\n      const { data } = await getUser();\n      setUserId(data.id);\n    };\n    catchErrors(fetchUserData());\n  }, [playlistId]);\n\n  useMemo(() => {\n    const fetchData = async () => {\n      if (playlist) {\n        const { data } = await getRecommendationsForTracks(playlist.tracks.items);\n        setRecommmendations(data);\n      }\n    };\n    catchErrors(fetchData());\n  }, [playlist]);\n\n  // If recPlaylistId has been set, add tracks to playlist and follow\n  useMemo(() => {\n    const isUserFollowingPlaylist = async plistId => {\n      const { data } = await doesUserFollowPlaylist(plistId, userId);\n      setIsFollowing(data[0]);\n    };\n\n    const addTracksAndFollow = async () => {\n      const uris = recommendations.tracks.map(({ uri }) => uri).join(',');\n      const { data } = await addTracksToPlaylist(recPlaylistId, uris);\n\n      // Then follow playlist\n      if (data) {\n        await followPlaylist(recPlaylistId);\n        // Check if user is following so we can change the save to spotify button to open on spotify\n        catchErrors(isUserFollowingPlaylist(recPlaylistId));\n      }\n    };\n\n    if (recPlaylistId && recommendations && userId) {\n      catchErrors(addTracksAndFollow(recPlaylistId));\n    }\n  }, [recPlaylistId, recommendations, userId]);\n\n  const createPlaylistOnSave = async () => {\n    if (!userId) {\n      return;\n    }\n\n    const name = `Recommended Tracks Based on ${playlist.name}`;\n    const { data } = await createPlaylist(userId, name);\n    setRecPlaylistId(data.id);\n  };\n\n  return (\n    <Main>\n      {playlist && (\n        <PlaylistHeading>\n          <h2>\n            Recommended Tracks Based On{' '}\n            <PlaylistLink to={`/playlists/${playlist.id}`}>{playlist.name}</PlaylistLink>\n          </h2>\n          {isFollowing && recPlaylistId ? (\n            <OpenButton\n              href={`https://open.spotify.com/playlist/${recPlaylistId}`}\n              target=\"_blank\"\n              rel=\"noopener noreferrer\">\n              Open in Spotify\n            </OpenButton>\n          ) : (\n            <SaveButton onClick={catchErrors(createPlaylistOnSave)}>Save to Spotify</SaveButton>\n          )}\n        </PlaylistHeading>\n      )}\n      <TracksContainer>\n        {recommendations &&\n          recommendations.tracks.map((track, i) => <TrackItem track={track} key={i} imageSize=\"small\" />)}\n      </TracksContainer>\n    </Main>\n  );\n};\n\nRecommendations.propTypes = {\n  playlistId: PropTypes.string,\n};\n\nexport default Recommendations;\n"]},"metadata":{},"sourceType":"module"}