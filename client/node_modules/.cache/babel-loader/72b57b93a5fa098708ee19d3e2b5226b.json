{"ast":null,"code":"import _styled from \"styled-components\";\n\nvar _jsxFileName = \"/Users/kobe/WebstormProjects/2022/music-transfer/client/src/components/FeatureChart.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport Chart from 'chart.js';\nimport { theme } from '../styles';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  fonts\n} = theme;\nconst properties = ['acousticness', 'danceability', 'energy', 'instrumentalness', 'liveness', 'speechiness', 'valence'];\nconst Container = _styled.div`\n  position: relative;\n  width: 100%;\n  max-width: 700px;\n\n  #chart {\n    margin: 0 auto;\n    margin-top: -30px;\n  }\n`;\n_c = Container;\n\nconst FeatureChart = props => {\n  _s();\n\n  const avg = arr => arr.reduce((a, b) => a + b, 0) / arr.length;\n\n  useEffect(() => {\n    const createDataset = features => {\n      const dataset = {};\n      properties.forEach(prop => {\n        dataset[prop] = features.length ? avg(features.map(feat => feat && feat[prop])) : features[prop];\n      });\n      return dataset;\n    };\n\n    const createChart = dataset => {\n      const {\n        type\n      } = props;\n      const ctx = document.getElementById('chart');\n      const labels = Object.keys(dataset);\n      const data = Object.values(dataset);\n      new Chart(ctx, {\n        type: type || 'bar',\n        data: {\n          labels,\n          datasets: [{\n            label: '',\n            data,\n            backgroundColor: ['rgba(255, 99, 132, 0.3)', 'rgba(255, 159, 64, 0.3)', 'rgba(255, 206, 86, 0.3)', 'rgba(75, 192, 192, 0.3)', 'rgba(54, 162, 235, 0.3)', 'rgba(104, 132, 245, 0.3)', 'rgba(153, 102, 255, 0.3)'],\n            borderColor: ['rgba(255,99,132,1)', 'rgba(255, 159, 64, 1)', 'rgba(255, 206, 86, 1)', 'rgba(75, 192, 192, 1)', 'rgba(54, 162, 235, 1)', 'rgba(104, 132, 245, 1)', 'rgba(153, 102, 255, 1)'],\n            borderWidth: 1\n          }]\n        },\n        options: {\n          layout: {\n            padding: {\n              left: 0,\n              right: 0,\n              top: 0,\n              bottom: 0\n            }\n          },\n          title: {\n            display: true,\n            text: `Audio Features`,\n            fontSize: 18,\n            fontFamily: `${fonts.primary}`,\n            fontColor: '#ffffff',\n            padding: 30\n          },\n          legend: {\n            display: false\n          },\n          scales: {\n            xAxes: [{\n              gridLines: {\n                color: 'rgba(255, 255, 255, 0.3)'\n              },\n              ticks: {\n                fontFamily: `${fonts.primary}`,\n                fontSize: 12\n              }\n            }],\n            yAxes: [{\n              gridLines: {\n                color: 'rgba(255, 255, 255, 0.3)'\n              },\n              ticks: {\n                beginAtZero: true,\n                fontFamily: `${fonts.primary}`,\n                fontSize: 12\n              }\n            }]\n          }\n        }\n      });\n    };\n\n    const parseData = () => {\n      const {\n        features\n      } = props;\n      const dataset = createDataset(features);\n      createChart(dataset);\n    };\n\n    parseData();\n  }, [props]);\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n      id: \"chart\",\n      width: \"400\",\n      height: \"400\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 139,\n    columnNumber: 5\n  }, this);\n};\n\n_s(FeatureChart, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c2 = FeatureChart;\nFeatureChart.propTypes = {\n  features: PropTypes.oneOfType([PropTypes.array, PropTypes.object]).isRequired,\n  type: PropTypes.string\n};\nexport default FeatureChart;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Container\");\n$RefreshReg$(_c2, \"FeatureChart\");","map":{"version":3,"sources":["/Users/kobe/WebstormProjects/2022/music-transfer/client/src/components/FeatureChart.js"],"names":["React","useEffect","PropTypes","Chart","theme","fonts","properties","Container","styled","div","FeatureChart","props","avg","arr","reduce","a","b","length","createDataset","features","dataset","forEach","prop","map","feat","createChart","type","ctx","document","getElementById","labels","Object","keys","data","values","datasets","label","backgroundColor","borderColor","borderWidth","options","layout","padding","left","right","top","bottom","title","display","text","fontSize","fontFamily","primary","fontColor","legend","scales","xAxes","gridLines","color","ticks","yAxes","beginAtZero","parseData","propTypes","oneOfType","array","object","isRequired","string"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,KAAP,MAAkB,UAAlB;AAGA,SAASC,KAAT,QAAsB,WAAtB;;AACA,MAAM;AAAEC,EAAAA;AAAF,IAAYD,KAAlB;AAEA,MAAME,UAAU,GAAG,CACjB,cADiB,EAEjB,cAFiB,EAGjB,QAHiB,EAIjB,kBAJiB,EAKjB,UALiB,EAMjB,aANiB,EAOjB,SAPiB,CAAnB;AAUA,MAAMC,SAAS,GAAGC,OAAM,CAACC,GAAI;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CATA;KAAMF,S;;AAWN,MAAMG,YAAY,GAAGC,KAAK,IAAI;AAAA;;AAC5B,QAAMC,GAAG,GAAGC,GAAG,IAAIA,GAAG,CAACC,MAAJ,CAAW,CAACC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,GAAGC,CAAzB,EAA4B,CAA5B,IAAiCH,GAAG,CAACI,MAAxD;;AAEAhB,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMiB,aAAa,GAAGC,QAAQ,IAAI;AAChC,YAAMC,OAAO,GAAG,EAAhB;AACAd,MAAAA,UAAU,CAACe,OAAX,CAAmBC,IAAI,IAAI;AACzBF,QAAAA,OAAO,CAACE,IAAD,CAAP,GAAgBH,QAAQ,CAACF,MAAT,GACZL,GAAG,CAACO,QAAQ,CAACI,GAAT,CAAaC,IAAI,IAAIA,IAAI,IAAIA,IAAI,CAACF,IAAD,CAAjC,CAAD,CADS,GAEZH,QAAQ,CAACG,IAAD,CAFZ;AAGD,OAJD;AAKA,aAAOF,OAAP;AACD,KARD;;AAUA,UAAMK,WAAW,GAAGL,OAAO,IAAI;AAC7B,YAAM;AAAEM,QAAAA;AAAF,UAAWf,KAAjB;AACA,YAAMgB,GAAG,GAAGC,QAAQ,CAACC,cAAT,CAAwB,OAAxB,CAAZ;AACA,YAAMC,MAAM,GAAGC,MAAM,CAACC,IAAP,CAAYZ,OAAZ,CAAf;AACA,YAAMa,IAAI,GAAGF,MAAM,CAACG,MAAP,CAAcd,OAAd,CAAb;AAEA,UAAIjB,KAAJ,CAAUwB,GAAV,EAAe;AACbD,QAAAA,IAAI,EAAEA,IAAI,IAAI,KADD;AAEbO,QAAAA,IAAI,EAAE;AACJH,UAAAA,MADI;AAEJK,UAAAA,QAAQ,EAAE,CACR;AACEC,YAAAA,KAAK,EAAE,EADT;AAEEH,YAAAA,IAFF;AAGEI,YAAAA,eAAe,EAAE,CACf,yBADe,EAEf,yBAFe,EAGf,yBAHe,EAIf,yBAJe,EAKf,yBALe,EAMf,0BANe,EAOf,0BAPe,CAHnB;AAYEC,YAAAA,WAAW,EAAE,CACX,oBADW,EAEX,uBAFW,EAGX,uBAHW,EAIX,uBAJW,EAKX,uBALW,EAMX,wBANW,EAOX,wBAPW,CAZf;AAqBEC,YAAAA,WAAW,EAAE;AArBf,WADQ;AAFN,SAFO;AA8BbC,QAAAA,OAAO,EAAE;AACPC,UAAAA,MAAM,EAAE;AACNC,YAAAA,OAAO,EAAE;AACPC,cAAAA,IAAI,EAAE,CADC;AAEPC,cAAAA,KAAK,EAAE,CAFA;AAGPC,cAAAA,GAAG,EAAE,CAHE;AAIPC,cAAAA,MAAM,EAAE;AAJD;AADH,WADD;AASPC,UAAAA,KAAK,EAAE;AACLC,YAAAA,OAAO,EAAE,IADJ;AAELC,YAAAA,IAAI,EAAG,gBAFF;AAGLC,YAAAA,QAAQ,EAAE,EAHL;AAILC,YAAAA,UAAU,EAAG,GAAE9C,KAAK,CAAC+C,OAAQ,EAJxB;AAKLC,YAAAA,SAAS,EAAE,SALN;AAMLX,YAAAA,OAAO,EAAE;AANJ,WATA;AAiBPY,UAAAA,MAAM,EAAE;AACNN,YAAAA,OAAO,EAAE;AADH,WAjBD;AAoBPO,UAAAA,MAAM,EAAE;AACNC,YAAAA,KAAK,EAAE,CACL;AACEC,cAAAA,SAAS,EAAE;AACTC,gBAAAA,KAAK,EAAE;AADE,eADb;AAIEC,cAAAA,KAAK,EAAE;AACLR,gBAAAA,UAAU,EAAG,GAAE9C,KAAK,CAAC+C,OAAQ,EADxB;AAELF,gBAAAA,QAAQ,EAAE;AAFL;AAJT,aADK,CADD;AAYNU,YAAAA,KAAK,EAAE,CACL;AACEH,cAAAA,SAAS,EAAE;AACTC,gBAAAA,KAAK,EAAE;AADE,eADb;AAIEC,cAAAA,KAAK,EAAE;AACLE,gBAAAA,WAAW,EAAE,IADR;AAELV,gBAAAA,UAAU,EAAG,GAAE9C,KAAK,CAAC+C,OAAQ,EAFxB;AAGLF,gBAAAA,QAAQ,EAAE;AAHL;AAJT,aADK;AAZD;AApBD;AA9BI,OAAf;AA6ED,KAnFD;;AAqFA,UAAMY,SAAS,GAAG,MAAM;AACtB,YAAM;AAAE3C,QAAAA;AAAF,UAAeR,KAArB;AACA,YAAMS,OAAO,GAAGF,aAAa,CAACC,QAAD,CAA7B;AACAM,MAAAA,WAAW,CAACL,OAAD,CAAX;AACD,KAJD;;AAMA0C,IAAAA,SAAS;AACV,GAvGQ,EAuGN,CAACnD,KAAD,CAvGM,CAAT;AAyGA,sBACE,QAAC,SAAD;AAAA,2BACE;AAAQ,MAAA,EAAE,EAAC,OAAX;AAAmB,MAAA,KAAK,EAAC,KAAzB;AAA+B,MAAA,MAAM,EAAC;AAAtC;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CAjHD;;GAAMD,Y;;MAAAA,Y;AAmHNA,YAAY,CAACqD,SAAb,GAAyB;AACvB5C,EAAAA,QAAQ,EAAEjB,SAAS,CAAC8D,SAAV,CAAoB,CAAC9D,SAAS,CAAC+D,KAAX,EAAkB/D,SAAS,CAACgE,MAA5B,CAApB,EAAyDC,UAD5C;AAEvBzC,EAAAA,IAAI,EAAExB,SAAS,CAACkE;AAFO,CAAzB;AAKA,eAAe1D,YAAf","sourcesContent":["import React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport Chart from 'chart.js';\n\nimport styled from 'styled-components/macro';\nimport { theme } from '../styles';\nconst { fonts } = theme;\n\nconst properties = [\n  'acousticness',\n  'danceability',\n  'energy',\n  'instrumentalness',\n  'liveness',\n  'speechiness',\n  'valence',\n];\n\nconst Container = styled.div`\n  position: relative;\n  width: 100%;\n  max-width: 700px;\n\n  #chart {\n    margin: 0 auto;\n    margin-top: -30px;\n  }\n`;\n\nconst FeatureChart = props => {\n  const avg = arr => arr.reduce((a, b) => a + b, 0) / arr.length;\n\n  useEffect(() => {\n    const createDataset = features => {\n      const dataset = {};\n      properties.forEach(prop => {\n        dataset[prop] = features.length\n          ? avg(features.map(feat => feat && feat[prop]))\n          : features[prop];\n      });\n      return dataset;\n    };\n\n    const createChart = dataset => {\n      const { type } = props;\n      const ctx = document.getElementById('chart');\n      const labels = Object.keys(dataset);\n      const data = Object.values(dataset);\n\n      new Chart(ctx, {\n        type: type || 'bar',\n        data: {\n          labels,\n          datasets: [\n            {\n              label: '',\n              data,\n              backgroundColor: [\n                'rgba(255, 99, 132, 0.3)',\n                'rgba(255, 159, 64, 0.3)',\n                'rgba(255, 206, 86, 0.3)',\n                'rgba(75, 192, 192, 0.3)',\n                'rgba(54, 162, 235, 0.3)',\n                'rgba(104, 132, 245, 0.3)',\n                'rgba(153, 102, 255, 0.3)',\n              ],\n              borderColor: [\n                'rgba(255,99,132,1)',\n                'rgba(255, 159, 64, 1)',\n                'rgba(255, 206, 86, 1)',\n                'rgba(75, 192, 192, 1)',\n                'rgba(54, 162, 235, 1)',\n                'rgba(104, 132, 245, 1)',\n                'rgba(153, 102, 255, 1)',\n              ],\n              borderWidth: 1,\n            },\n          ],\n        },\n        options: {\n          layout: {\n            padding: {\n              left: 0,\n              right: 0,\n              top: 0,\n              bottom: 0,\n            },\n          },\n          title: {\n            display: true,\n            text: `Audio Features`,\n            fontSize: 18,\n            fontFamily: `${fonts.primary}`,\n            fontColor: '#ffffff',\n            padding: 30,\n          },\n          legend: {\n            display: false,\n          },\n          scales: {\n            xAxes: [\n              {\n                gridLines: {\n                  color: 'rgba(255, 255, 255, 0.3)',\n                },\n                ticks: {\n                  fontFamily: `${fonts.primary}`,\n                  fontSize: 12,\n                },\n              },\n            ],\n            yAxes: [\n              {\n                gridLines: {\n                  color: 'rgba(255, 255, 255, 0.3)',\n                },\n                ticks: {\n                  beginAtZero: true,\n                  fontFamily: `${fonts.primary}`,\n                  fontSize: 12,\n                },\n              },\n            ],\n          },\n        },\n      });\n    };\n\n    const parseData = () => {\n      const { features } = props;\n      const dataset = createDataset(features);\n      createChart(dataset);\n    };\n\n    parseData();\n  }, [props]);\n\n  return (\n    <Container>\n      <canvas id=\"chart\" width=\"400\" height=\"400\" />\n    </Container>\n  );\n};\n\nFeatureChart.propTypes = {\n  features: PropTypes.oneOfType([PropTypes.array, PropTypes.object]).isRequired,\n  type: PropTypes.string,\n};\n\nexport default FeatureChart;\n"]},"metadata":{},"sourceType":"module"}