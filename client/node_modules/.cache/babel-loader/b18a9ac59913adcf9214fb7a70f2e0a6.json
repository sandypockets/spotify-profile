{"ast":null,"code":"import _styled from \"styled-components\";\n\nvar _jsxFileName = \"/Users/kobe/WebstormProjects/2022/music-transfer/client/src/components/Artist.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { formatWithCommas, catchErrors } from '../utils';\nimport { getArtist } from '../spotify';\nimport Loader from './Loader';\nimport { theme, mixins, media, Main } from '../styles';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst {\n  colors,\n  fontSizes,\n  spacing\n} = theme;\nconst Genre = _styled.div`\n  font-size: ${fontSizes.md};\n`;\nconst NumLabel = _styled.p`\n  color: ${colors.lightGrey};\n  font-size: ${fontSizes.xs};\n  text-transform: uppercase;\n  letter-spacing: 1px;\n  margin-top: ${spacing.xs};\n`;\n_c = NumLabel;\n\nconst Artist = props => {\n  _s();\n\n  const {\n    artistId\n  } = props;\n  const [artist, setArtist] = useState(null);\n  useEffect(() => {\n    const fetchData = async () => {\n      const {\n        data\n      } = await getArtist(artistId);\n      setArtist(data);\n    };\n\n    catchErrors(fetchData());\n  }, [artistId]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: artist ? /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"w-full mx-auto flex flex-col text-center h-full\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"w-full\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: artist.images[0].url,\n          alt: \"Artist Artwork\",\n          className: \"w-72 rounded-full mx-auto mt-8\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"text-7xl mt-8\",\n          children: artist.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"grid grid-cols-3 gap-4 mt-3 text-center\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"text-blue font-semibold text-2xl capitalize\",\n              children: formatWithCommas(artist.followers.total)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 46,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(NumLabel, {\n              children: \"Followers\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 47,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 15\n          }, this), artist.genres && /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"text-blue font-semibold text-2xl capitalize\",\n              children: artist.genres.map(genre => /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"text-md\",\n                children: genre\n              }, genre, false, {\n                fileName: _jsxFileName,\n                lineNumber: 53,\n                columnNumber: 23\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 51,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(NumLabel, {\n              children: \"Genres\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 56,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 17\n          }, this), artist.popularity && /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"text-blue font-semibold text-2xl capitalize\",\n              children: [artist.popularity, \"%\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 61,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(NumLabel, {\n              children: \"Popularity\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 62,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n};\n\n_s(Artist, \"emSpmX0vOB8Af/gNwbdvtvp3jT0=\");\n\n_c2 = Artist;\nArtist.propTypes = {\n  artistId: PropTypes.string\n};\nexport default Artist;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"NumLabel\");\n$RefreshReg$(_c2, \"Artist\");","map":{"version":3,"sources":["/Users/kobe/WebstormProjects/2022/music-transfer/client/src/components/Artist.jsx"],"names":["React","useState","useEffect","PropTypes","formatWithCommas","catchErrors","getArtist","Loader","theme","mixins","media","Main","colors","fontSizes","spacing","Genre","styled","div","md","NumLabel","p","lightGrey","xs","Artist","props","artistId","artist","setArtist","fetchData","data","images","url","name","followers","total","genres","map","genre","popularity","propTypes","string"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { formatWithCommas, catchErrors } from '../utils';\nimport { getArtist } from '../spotify';\n\nimport Loader from './Loader';\n\nimport styled from 'styled-components/macro';\nimport { theme, mixins, media, Main } from '../styles';\nconst { colors, fontSizes, spacing } = theme;\n\nconst Genre = styled.div`\n  font-size: ${fontSizes.md};\n`;\nconst NumLabel = styled.p`\n  color: ${colors.lightGrey};\n  font-size: ${fontSizes.xs};\n  text-transform: uppercase;\n  letter-spacing: 1px;\n  margin-top: ${spacing.xs};\n`;\n\nconst Artist = props => {\n  const { artistId } = props;\n  const [artist, setArtist] = useState(null);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const { data } = await getArtist(artistId);\n      setArtist(data);\n    };\n    catchErrors(fetchData());\n  }, [artistId]);\n\n  return (\n    <>\n      {artist ? (\n        <main className=\"w-full mx-auto flex flex-col text-center h-full\">\n          <div className=\"w-full\">\n            <img src={artist.images[0].url} alt=\"Artist Artwork\" className=\"w-72 rounded-full mx-auto mt-8\" />\n          </div>\n          <div>\n            <h1 className=\"text-7xl mt-8\">{artist.name}</h1>\n            <div className=\"grid grid-cols-3 gap-4 mt-3 text-center\">\n              <div>\n                <div className=\"text-blue font-semibold text-2xl capitalize\">{formatWithCommas(artist.followers.total)}</div>\n                <NumLabel>Followers</NumLabel>\n              </div>\n              {artist.genres && (\n                <div>\n                  <div className=\"text-blue font-semibold text-2xl capitalize\">\n                    {artist.genres.map(genre => (\n                      <p className=\"text-md\" key={genre}>{genre}</p>\n                    ))}\n                  </div>\n                  <NumLabel>Genres</NumLabel>\n                </div>\n              )}\n              {artist.popularity && (\n                <div>\n                  <div className=\"text-blue font-semibold text-2xl capitalize\">{artist.popularity}%</div>\n                  <NumLabel>Popularity</NumLabel>\n                </div>\n              )}\n            </div>\n          </div>\n        </main>\n      ) : (\n        <Loader />\n      )}\n    </>\n  );\n};\n\nArtist.propTypes = {\n  artistId: PropTypes.string,\n};\n\nexport default Artist;\n"]},"metadata":{},"sourceType":"module"}