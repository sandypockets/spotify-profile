{"ast":null,"code":"var _jsxFileName = \"/Users/kobe/WebstormProjects/2022/music-transfer/client/src/components/Playlists/Recommendations.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useMemo } from 'react';\nimport { Link } from '@reach/router';\nimport PropTypes from 'prop-types';\nimport { getPlaylist, getRecommendationsForTracks, getUser, createPlaylist, addTracksToPlaylist, followPlaylist, doesUserFollowPlaylist } from '../../spotify';\nimport { catchErrors } from '../../utils';\nimport Button from '../Layout/Button';\nimport TrackItem from '../Tracks/TrackItem';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Recommendations = props => {\n  _s();\n\n  const {\n    playlistId\n  } = props;\n  const [playlist, setPlaylist] = useState(null);\n  const [recommendations, setRecommendations] = useState(null);\n  const [recPlaylistId, setRecPlaylistId] = useState(null);\n  const [userId, setUserId] = useState(null);\n  const [isFollowing, setIsFollowing] = useState(false);\n  useEffect(() => {\n    const fetchPlaylistData = async () => {\n      const {\n        data\n      } = await getPlaylist(playlistId);\n      setPlaylist(data);\n    };\n\n    catchErrors(fetchPlaylistData());\n\n    const fetchUserData = async () => {\n      const {\n        data\n      } = await getUser();\n      setUserId(data.id);\n    };\n\n    catchErrors(fetchUserData());\n  }, [playlistId]);\n  useMemo(() => {\n    const fetchData = async () => {\n      if (playlist) {\n        const {\n          data\n        } = await getRecommendationsForTracks(playlist.tracks.items);\n        setRecommendations(data);\n      }\n    };\n\n    catchErrors(fetchData());\n  }, [playlist]); // If recPlaylistId has been set, add tracks to playlist and follow\n\n  useMemo(() => {\n    const isUserFollowingPlaylist = async plistId => {\n      const {\n        data\n      } = await doesUserFollowPlaylist(plistId, userId);\n      setIsFollowing(data[0]);\n    };\n\n    const addTracksAndFollow = async () => {\n      const uris = recommendations.tracks.map(_ref => {\n        let {\n          uri\n        } = _ref;\n        return uri;\n      }).join(',');\n      const {\n        data\n      } = await addTracksToPlaylist(recPlaylistId, uris); // Then follow playlist\n\n      if (data) {\n        await followPlaylist(recPlaylistId); // Check if user is following so we can change the save to spotify button to open on spotify\n\n        catchErrors(isUserFollowingPlaylist(recPlaylistId));\n      }\n    };\n\n    if (recPlaylistId && recommendations && userId) {\n      catchErrors(addTracksAndFollow(recPlaylistId));\n    }\n  }, [recPlaylistId, recommendations, userId]);\n\n  const createPlaylistOnSave = async () => {\n    if (!userId) {\n      return;\n    }\n\n    const name = `Recommended Tracks Based on ${playlist.name}`;\n    const {\n      data\n    } = await createPlaylist(userId, name);\n    setRecPlaylistId(data.id);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    className: \"w-full mx-auto p-24\",\n    children: [playlist && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex justify-between\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Recommended Tracks Based On\", ' ', /*#__PURE__*/_jsxDEV(Link, {\n          to: `/playlists/${playlist.id}`,\n          children: /*#__PURE__*/_jsxDEV(\"a\", {\n            className: \"hover:text-green\",\n            children: playlist.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 11\n      }, this), isFollowing && recPlaylistId ? /*#__PURE__*/_jsxDEV(Button, {\n        styleType: \"pill-solid\",\n        children: /*#__PURE__*/_jsxDEV(\"a\", {\n          href: `https://open.spotify.com/playlist/${recPlaylistId}`,\n          target: \"_blank\",\n          rel: \"noopener noreferrer\",\n          children: \"Open in Spotify\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(Button, {\n        styleType: \"pill-solid\",\n        onClickHandler: catchErrors(createPlaylistOnSave),\n        children: \"Save to Spotify\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mt-24\",\n      children: recommendations && recommendations.tracks.map((track, i) => /*#__PURE__*/_jsxDEV(TrackItem, {\n        track: track,\n        imageSize: \"small\"\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 52\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Recommendations, \"QW7m9oNZuyuhCJdlLuupKXw9+e8=\");\n\n_c = Recommendations;\nRecommendations.propTypes = {\n  playlistId: PropTypes.string\n};\nexport default Recommendations;\n\nvar _c;\n\n$RefreshReg$(_c, \"Recommendations\");","map":{"version":3,"sources":["/Users/kobe/WebstormProjects/2022/music-transfer/client/src/components/Playlists/Recommendations.js"],"names":["React","useState","useEffect","useMemo","Link","PropTypes","getPlaylist","getRecommendationsForTracks","getUser","createPlaylist","addTracksToPlaylist","followPlaylist","doesUserFollowPlaylist","catchErrors","Button","TrackItem","Recommendations","props","playlistId","playlist","setPlaylist","recommendations","setRecommendations","recPlaylistId","setRecPlaylistId","userId","setUserId","isFollowing","setIsFollowing","fetchPlaylistData","data","fetchUserData","id","fetchData","tracks","items","isUserFollowingPlaylist","plistId","addTracksAndFollow","uris","map","uri","join","createPlaylistOnSave","name","track","i","propTypes","string"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useMemo } from 'react';\nimport { Link } from '@reach/router';\nimport PropTypes from 'prop-types';\nimport { getPlaylist, getRecommendationsForTracks, getUser, createPlaylist, addTracksToPlaylist, followPlaylist, doesUserFollowPlaylist } from '../../spotify';\nimport { catchErrors } from '../../utils';\nimport Button from '../Layout/Button'\nimport TrackItem from '../Tracks/TrackItem';\n\nconst Recommendations = props => {\n  const { playlistId } = props;\n\n  const [playlist, setPlaylist] = useState(null);\n  const [recommendations, setRecommendations] = useState(null);\n  const [recPlaylistId, setRecPlaylistId] = useState(null);\n  const [userId, setUserId] = useState(null);\n  const [isFollowing, setIsFollowing] = useState(false);\n\n  useEffect(() => {\n    const fetchPlaylistData = async () => {\n      const { data } = await getPlaylist(playlistId);\n      setPlaylist(data);\n    };\n    catchErrors(fetchPlaylistData());\n\n    const fetchUserData = async () => {\n      const { data } = await getUser();\n      setUserId(data.id);\n    };\n    catchErrors(fetchUserData());\n  }, [playlistId]);\n\n  useMemo(() => {\n    const fetchData = async () => {\n      if (playlist) {\n        const { data } = await getRecommendationsForTracks(playlist.tracks.items);\n        setRecommendations(data);\n      }\n    };\n    catchErrors(fetchData());\n  }, [playlist]);\n\n  // If recPlaylistId has been set, add tracks to playlist and follow\n  useMemo(() => {\n    const isUserFollowingPlaylist = async plistId => {\n      const { data } = await doesUserFollowPlaylist(plistId, userId);\n      setIsFollowing(data[0]);\n    };\n\n    const addTracksAndFollow = async () => {\n      const uris = recommendations.tracks.map(({ uri }) => uri).join(',');\n      const { data } = await addTracksToPlaylist(recPlaylistId, uris);\n\n      // Then follow playlist\n      if (data) {\n        await followPlaylist(recPlaylistId);\n        // Check if user is following so we can change the save to spotify button to open on spotify\n        catchErrors(isUserFollowingPlaylist(recPlaylistId));\n      }\n    };\n\n    if (recPlaylistId && recommendations && userId) {\n      catchErrors(addTracksAndFollow(recPlaylistId));\n    }\n  }, [recPlaylistId, recommendations, userId]);\n\n  const createPlaylistOnSave = async () => {\n    if (!userId) {\n      return;\n    }\n\n    const name = `Recommended Tracks Based on ${playlist.name}`;\n    const { data } = await createPlaylist(userId, name);\n    setRecPlaylistId(data.id);\n  };\n\n  return (\n    <main className=\"w-full mx-auto p-24\">\n      {playlist && (\n        <div className=\"flex justify-between\">\n          <h2>\n            Recommended Tracks Based On{' '}\n            <Link to={`/playlists/${playlist.id}`}>\n              <a className=\"hover:text-green\">\n              {playlist.name}\n              </a>\n            </Link>\n          </h2>\n          {isFollowing && recPlaylistId ? (\n            <Button styleType=\"pill-solid\">\n              <a\n                href={`https://open.spotify.com/playlist/${recPlaylistId}`}\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                Open in Spotify\n              </a>\n            </Button>\n          ) : (\n            <Button styleType=\"pill-solid\" onClickHandler={catchErrors(createPlaylistOnSave)}>\n              Save to Spotify\n            </Button>\n          )}\n        </div>\n      )}\n      <div className=\"mt-24\">\n        {recommendations &&\n          recommendations.tracks.map((track, i) => <TrackItem track={track} key={i} imageSize=\"small\" />)}\n      </div>\n    </main>\n  );\n};\n\nRecommendations.propTypes = {\n  playlistId: PropTypes.string,\n};\n\nexport default Recommendations;\n"]},"metadata":{},"sourceType":"module"}