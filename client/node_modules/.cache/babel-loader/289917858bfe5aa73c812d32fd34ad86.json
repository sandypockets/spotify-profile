{"ast":null,"code":"import _styled from \"styled-components\";\n\nvar _jsxFileName = \"/Users/kobe/WebstormProjects/2022/music-transfer/client/src/components/Artist.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { formatWithCommas, catchErrors } from '../utils';\nimport { getArtist } from '../spotify';\nimport Loader from './Loader';\nimport { theme, mixins, media, Main } from '../styles';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  colors,\n  fontSizes,\n  spacing\n} = theme;\nconst ArtistContainer = _styled(Main)`\n  ${mixins.flexCenter};\n  flex-direction: column;\n  height: 100%;\n  text-align: center;\n`;\n_c = ArtistContainer;\nconst Artwork = _styled.div`\n  ${mixins.coverShadow};\n  border-radius: 100%;\n  img {\n    object-fit: cover;\n    border-radius: 100%;\n    width: 300px;\n    height: 300px;\n    ${media.tablet`\n      width: 200px;\n      height: 200px;\n    `};\n  }\n`;\n_c2 = Artwork;\nconst ArtistName = _styled.h1`\n  font-size: 70px;\n  margin-top: ${spacing.md};\n  ${media.tablet`\n    font-size: 7vw;\n  `};\n`;\n_c3 = ArtistName;\nconst Stats = _styled.div`\n  display: grid;\n  grid-template-columns: 1fr 1fr 1fr;\n  grid-gap: 10px;\n  margin-top: ${spacing.md};\n  text-align: center;\n`;\n_c4 = Stats;\nconst Stat = _styled.div``;\n_c5 = Stat;\nconst Number = _styled.div`\n  color: ${colors.blue};\n  font-weight: 700;\n  font-size: ${fontSizes.lg};\n  text-transform: capitalize;\n  ${media.tablet`\n    font-size: ${fontSizes.md};\n  `};\n`;\n_c6 = Number;\nconst Genre = _styled.div`\n  font-size: ${fontSizes.md};\n`;\n_c7 = Genre;\nconst NumLabel = _styled.p`\n  color: ${colors.lightGrey};\n  font-size: ${fontSizes.xs};\n  text-transform: uppercase;\n  letter-spacing: 1px;\n  margin-top: ${spacing.xs};\n`;\n_c8 = NumLabel;\n\nconst Artist = props => {\n  _s();\n\n  const {\n    artistId\n  } = props;\n  const [artist, setArtist] = useState(null);\n  useEffect(() => {\n    const fetchData = async () => {\n      const {\n        data\n      } = await getArtist(artistId);\n      setArtist(data);\n    };\n\n    catchErrors(fetchData());\n  }, [artistId]);\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: artist ? /*#__PURE__*/_jsxDEV(ArtistContainer, {\n      children: [/*#__PURE__*/_jsxDEV(Artwork, {\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: artist.images[0].url,\n          alt: \"Artist Artwork\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(ArtistName, {\n          children: artist.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Stats, {\n          children: [/*#__PURE__*/_jsxDEV(Stat, {\n            children: [/*#__PURE__*/_jsxDEV(Number, {\n              children: formatWithCommas(artist.followers.total)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 90,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(NumLabel, {\n              children: \"Followers\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 91,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 15\n          }, this), artist.genres && /*#__PURE__*/_jsxDEV(Stat, {\n            children: [/*#__PURE__*/_jsxDEV(Number, {\n              children: artist.genres.map(genre => /*#__PURE__*/_jsxDEV(Genre, {\n                children: genre\n              }, genre, false, {\n                fileName: _jsxFileName,\n                lineNumber: 97,\n                columnNumber: 23\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 95,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(NumLabel, {\n              children: \"Genres\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 100,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 17\n          }, this), artist.popularity && /*#__PURE__*/_jsxDEV(Stat, {\n            children: [/*#__PURE__*/_jsxDEV(Number, {\n              children: [artist.popularity, \"%\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 105,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(NumLabel, {\n              children: \"Popularity\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 106,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Artist, \"emSpmX0vOB8Af/gNwbdvtvp3jT0=\");\n\n_c9 = Artist;\nArtist.propTypes = {\n  artistId: PropTypes.string\n};\nexport default Artist;\n\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9;\n\n$RefreshReg$(_c, \"ArtistContainer\");\n$RefreshReg$(_c2, \"Artwork\");\n$RefreshReg$(_c3, \"ArtistName\");\n$RefreshReg$(_c4, \"Stats\");\n$RefreshReg$(_c5, \"Stat\");\n$RefreshReg$(_c6, \"Number\");\n$RefreshReg$(_c7, \"Genre\");\n$RefreshReg$(_c8, \"NumLabel\");\n$RefreshReg$(_c9, \"Artist\");","map":{"version":3,"sources":["/Users/kobe/WebstormProjects/2022/music-transfer/client/src/components/Artist.js"],"names":["React","useState","useEffect","PropTypes","formatWithCommas","catchErrors","getArtist","Loader","theme","mixins","media","Main","colors","fontSizes","spacing","ArtistContainer","styled","flexCenter","Artwork","div","coverShadow","tablet","ArtistName","h1","md","Stats","Stat","Number","blue","lg","Genre","NumLabel","p","lightGrey","xs","Artist","props","artistId","artist","setArtist","fetchData","data","images","url","name","followers","total","genres","map","genre","popularity","propTypes","string"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { formatWithCommas, catchErrors } from '../utils';\nimport { getArtist } from '../spotify';\n\nimport Loader from './Loader';\n\nimport styled from 'styled-components/macro';\nimport { theme, mixins, media, Main } from '../styles';\nconst { colors, fontSizes, spacing } = theme;\n\nconst ArtistContainer = styled(Main)`\n  ${mixins.flexCenter};\n  flex-direction: column;\n  height: 100%;\n  text-align: center;\n`;\nconst Artwork = styled.div`\n  ${mixins.coverShadow};\n  border-radius: 100%;\n  img {\n    object-fit: cover;\n    border-radius: 100%;\n    width: 300px;\n    height: 300px;\n    ${media.tablet`\n      width: 200px;\n      height: 200px;\n    `};\n  }\n`;\nconst ArtistName = styled.h1`\n  font-size: 70px;\n  margin-top: ${spacing.md};\n  ${media.tablet`\n    font-size: 7vw;\n  `};\n`;\nconst Stats = styled.div`\n  display: grid;\n  grid-template-columns: 1fr 1fr 1fr;\n  grid-gap: 10px;\n  margin-top: ${spacing.md};\n  text-align: center;\n`;\nconst Stat = styled.div``;\nconst Number = styled.div`\n  color: ${colors.blue};\n  font-weight: 700;\n  font-size: ${fontSizes.lg};\n  text-transform: capitalize;\n  ${media.tablet`\n    font-size: ${fontSizes.md};\n  `};\n`;\nconst Genre = styled.div`\n  font-size: ${fontSizes.md};\n`;\nconst NumLabel = styled.p`\n  color: ${colors.lightGrey};\n  font-size: ${fontSizes.xs};\n  text-transform: uppercase;\n  letter-spacing: 1px;\n  margin-top: ${spacing.xs};\n`;\n\nconst Artist = props => {\n  const { artistId } = props;\n  const [artist, setArtist] = useState(null);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const { data } = await getArtist(artistId);\n      setArtist(data);\n    };\n    catchErrors(fetchData());\n  }, [artistId]);\n\n  return (\n    <React.Fragment>\n      {artist ? (\n        <ArtistContainer>\n          <Artwork>\n            <img src={artist.images[0].url} alt=\"Artist Artwork\" />\n          </Artwork>\n          <div>\n            <ArtistName>{artist.name}</ArtistName>\n            <Stats>\n              <Stat>\n                <Number>{formatWithCommas(artist.followers.total)}</Number>\n                <NumLabel>Followers</NumLabel>\n              </Stat>\n              {artist.genres && (\n                <Stat>\n                  <Number>\n                    {artist.genres.map(genre => (\n                      <Genre key={genre}>{genre}</Genre>\n                    ))}\n                  </Number>\n                  <NumLabel>Genres</NumLabel>\n                </Stat>\n              )}\n              {artist.popularity && (\n                <Stat>\n                  <Number>{artist.popularity}%</Number>\n                  <NumLabel>Popularity</NumLabel>\n                </Stat>\n              )}\n            </Stats>\n          </div>\n        </ArtistContainer>\n      ) : (\n        <Loader />\n      )}\n    </React.Fragment>\n  );\n};\n\nArtist.propTypes = {\n  artistId: PropTypes.string,\n};\n\nexport default Artist;\n"]},"metadata":{},"sourceType":"module"}