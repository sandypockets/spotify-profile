{"ast":null,"code":"// Get the query params off the window's URL\nexport const getHashParams = () => {\n  const hashParams = {};\n  let e;\n  const r = /([^&;=]+)=?([^&;]*)/g;\n  const q = window.location.hash.substring(1);\n\n  while (e = r.exec(q)) {\n    hashParams[e[1]] = decodeURIComponent(e[2]);\n  }\n\n  return hashParams;\n}; // Format milliseconds into MM:SS\n\nexport const formatDuration = millis => {\n  const minutes = Math.floor(millis / 60000);\n  const seconds = (millis % 60000 / 1000).toFixed(0);\n  return `${minutes}:${seconds < 10 ? '0' : ''}${seconds}`;\n}; // Format milliseconds into X minutes and Y seconds\n\nexport const formatDurationForHumans = millis => {\n  const minutes = Math.floor(millis / 60000);\n  const seconds = (millis % 60000 / 1000).toFixed(0);\n  return `${minutes} Mins ${seconds} Secs`;\n}; // Get year from YYYY-MM-DD\n\nexport const getYear = date => date.split('-')[0]; // Transform Pitch Class Notation to string\n\nexport const parsePitchClass = note => {\n  let key = note;\n\n  switch (note) {\n    case 0:\n      key = 'C';\n      break;\n\n    case 1:\n      key = 'D♭';\n      break;\n\n    case 2:\n      key = 'D';\n      break;\n\n    case 3:\n      key = 'E♭';\n      break;\n\n    case 4:\n      key = 'E';\n      break;\n\n    case 5:\n      key = 'F';\n      break;\n\n    case 6:\n      key = 'G♭';\n      break;\n\n    case 7:\n      key = 'G';\n      break;\n\n    case 8:\n      key = 'A♭';\n      break;\n\n    case 9:\n      key = 'A';\n      break;\n\n    case 10:\n      key = 'B♭';\n      break;\n\n    case 11:\n      key = 'B';\n      break;\n\n    default:\n      return null;\n  }\n\n  return key;\n};\nexport const formatWithCommas = n => n.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ','); // Higher-order function for async/await error handling\n\nexport const catchErrors = fn => function () {\n  return fn(...arguments).catch(err => {\n    console.error(err);\n  });\n};","map":{"version":3,"sources":["/Users/kobe/WebstormProjects/2022/spotify-profile-app/client/src/utils/index.js"],"names":["getHashParams","hashParams","e","r","q","window","location","hash","substring","exec","decodeURIComponent","formatDuration","millis","minutes","Math","floor","seconds","toFixed","formatDurationForHumans","getYear","date","split","parsePitchClass","note","key","formatWithCommas","n","toString","replace","catchErrors","fn","catch","err","console","error"],"mappings":"AAAA;AACA,OAAO,MAAMA,aAAa,GAAG,MAAM;AACjC,QAAMC,UAAU,GAAG,EAAnB;AACA,MAAIC,CAAJ;AACA,QAAMC,CAAC,GAAG,sBAAV;AACA,QAAMC,CAAC,GAAGC,MAAM,CAACC,QAAP,CAAgBC,IAAhB,CAAqBC,SAArB,CAA+B,CAA/B,CAAV;;AACA,SAAQN,CAAC,GAAGC,CAAC,CAACM,IAAF,CAAOL,CAAP,CAAZ,EAAwB;AACtBH,IAAAA,UAAU,CAACC,CAAC,CAAC,CAAD,CAAF,CAAV,GAAmBQ,kBAAkB,CAACR,CAAC,CAAC,CAAD,CAAF,CAArC;AACD;;AACD,SAAOD,UAAP;AACD,CATM,C,CAWP;;AACA,OAAO,MAAMU,cAAc,GAAGC,MAAM,IAAI;AACtC,QAAMC,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWH,MAAM,GAAG,KAApB,CAAhB;AACA,QAAMI,OAAO,GAAG,CAAEJ,MAAM,GAAG,KAAV,GAAmB,IAApB,EAA0BK,OAA1B,CAAkC,CAAlC,CAAhB;AACA,SAAQ,GAAEJ,OAAQ,IAAGG,OAAO,GAAG,EAAV,GAAe,GAAf,GAAqB,EAAG,GAAEA,OAAQ,EAAvD;AACD,CAJM,C,CAMP;;AACA,OAAO,MAAME,uBAAuB,GAAGN,MAAM,IAAI;AAC/C,QAAMC,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWH,MAAM,GAAG,KAApB,CAAhB;AACA,QAAMI,OAAO,GAAG,CAAEJ,MAAM,GAAG,KAAV,GAAmB,IAApB,EAA0BK,OAA1B,CAAkC,CAAlC,CAAhB;AACA,SAAQ,GAAEJ,OAAQ,SAAQG,OAAQ,OAAlC;AACD,CAJM,C,CAMP;;AACA,OAAO,MAAMG,OAAO,GAAGC,IAAI,IAAIA,IAAI,CAACC,KAAL,CAAW,GAAX,EAAgB,CAAhB,CAAxB,C,CAEP;;AACA,OAAO,MAAMC,eAAe,GAAGC,IAAI,IAAI;AACrC,MAAIC,GAAG,GAAGD,IAAV;;AAEA,UAAQA,IAAR;AACE,SAAK,CAAL;AACEC,MAAAA,GAAG,GAAG,GAAN;AACA;;AACF,SAAK,CAAL;AACEA,MAAAA,GAAG,GAAG,IAAN;AACA;;AACF,SAAK,CAAL;AACEA,MAAAA,GAAG,GAAG,GAAN;AACA;;AACF,SAAK,CAAL;AACEA,MAAAA,GAAG,GAAG,IAAN;AACA;;AACF,SAAK,CAAL;AACEA,MAAAA,GAAG,GAAG,GAAN;AACA;;AACF,SAAK,CAAL;AACEA,MAAAA,GAAG,GAAG,GAAN;AACA;;AACF,SAAK,CAAL;AACEA,MAAAA,GAAG,GAAG,IAAN;AACA;;AACF,SAAK,CAAL;AACEA,MAAAA,GAAG,GAAG,GAAN;AACA;;AACF,SAAK,CAAL;AACEA,MAAAA,GAAG,GAAG,IAAN;AACA;;AACF,SAAK,CAAL;AACEA,MAAAA,GAAG,GAAG,GAAN;AACA;;AACF,SAAK,EAAL;AACEA,MAAAA,GAAG,GAAG,IAAN;AACA;;AACF,SAAK,EAAL;AACEA,MAAAA,GAAG,GAAG,GAAN;AACA;;AACF;AACE,aAAO,IAAP;AAtCJ;;AAyCA,SAAOA,GAAP;AACD,CA7CM;AA+CP,OAAO,MAAMC,gBAAgB,GAAGC,CAAC,IAAIA,CAAC,CAACC,QAAF,GAAaC,OAAb,CAAqB,uBAArB,EAA8C,GAA9C,CAA9B,C,CAEP;;AACA,OAAO,MAAMC,WAAW,GAAGC,EAAE,IAC3B,YAAkB;AAChB,SAAOA,EAAE,CAAC,YAAD,CAAF,CAAYC,KAAZ,CAAkBC,GAAG,IAAI;AAC9BC,IAAAA,OAAO,CAACC,KAAR,CAAcF,GAAd;AACD,GAFM,CAAP;AAGD,CALI","sourcesContent":["// Get the query params off the window's URL\nexport const getHashParams = () => {\n  const hashParams = {};\n  let e;\n  const r = /([^&;=]+)=?([^&;]*)/g;\n  const q = window.location.hash.substring(1);\n  while ((e = r.exec(q))) {\n    hashParams[e[1]] = decodeURIComponent(e[2]);\n  }\n  return hashParams;\n};\n\n// Format milliseconds into MM:SS\nexport const formatDuration = millis => {\n  const minutes = Math.floor(millis / 60000);\n  const seconds = ((millis % 60000) / 1000).toFixed(0);\n  return `${minutes}:${seconds < 10 ? '0' : ''}${seconds}`;\n};\n\n// Format milliseconds into X minutes and Y seconds\nexport const formatDurationForHumans = millis => {\n  const minutes = Math.floor(millis / 60000);\n  const seconds = ((millis % 60000) / 1000).toFixed(0);\n  return `${minutes} Mins ${seconds} Secs`;\n};\n\n// Get year from YYYY-MM-DD\nexport const getYear = date => date.split('-')[0];\n\n// Transform Pitch Class Notation to string\nexport const parsePitchClass = note => {\n  let key = note;\n\n  switch (note) {\n    case 0:\n      key = 'C';\n      break;\n    case 1:\n      key = 'D♭';\n      break;\n    case 2:\n      key = 'D';\n      break;\n    case 3:\n      key = 'E♭';\n      break;\n    case 4:\n      key = 'E';\n      break;\n    case 5:\n      key = 'F';\n      break;\n    case 6:\n      key = 'G♭';\n      break;\n    case 7:\n      key = 'G';\n      break;\n    case 8:\n      key = 'A♭';\n      break;\n    case 9:\n      key = 'A';\n      break;\n    case 10:\n      key = 'B♭';\n      break;\n    case 11:\n      key = 'B';\n      break;\n    default:\n      return null;\n  }\n\n  return key;\n};\n\nexport const formatWithCommas = n => n.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n\n// Higher-order function for async/await error handling\nexport const catchErrors = fn =>\n  function(...args) {\n    return fn(...args).catch(err => {\n      console.error(err);\n    });\n  };\n"]},"metadata":{},"sourceType":"module"}